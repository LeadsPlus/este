suite 'este.dev.CoffeeForClosure', ->
  
  CoffeeForClosure = este.dev.CoffeeForClosure
  
  coffeeForClosure = null
  coffeeForClosureNoNamespace = null
  coffeeForClosureWithExtends = null
  coffeeForClosureWithExtendsNoNamespace = null

  coffeeSource = null
  closureSource = null

  coffeeSourceNoNamespace = null
  closureSourceNoNamespace = null

  coffeeSourceWithExtends = null
  closureSourceWithExtends = null

  coffeeSourceWithExtendsNoNamespace = null
  closureSourceWithExtendsNoNamespace = null

  setup ->
    coffeeSource = """
      // Generated by CoffeeScript 1.3.4
      var testForString = 'function Person'
      var testForString = "function Person"
      /* function Person */
      var Person;

      goog.provide('example.Person');

      example.Person = (function() {
        /**
          @param {string} name
          @constructor
        */

        function Person(name) {
          this.name = name;
          this.bla = {};
          this.fok = '$' // dollar sucks for some reason
        }

        /**
          @enum {string}
        */


        Person.EventType = {
          'FOO': 'foo'
        };

        /**
          @type {string}
        */


        Person.prototype.name = '';

        Person.prototype.showName = function() {
          return alert(this.name + Person.EventType);
        };return Person;

      })();"""

    closureSource = """
      // Fixed coffee code for Closure Compiler by este dev stack
      // Generated by CoffeeScript 1.3.4
      var testForString = 'function Person'
      var testForString = "function Person"
      /* function Person */
      

      goog.provide('example.Person');

      
        /**
          @param {string} name
          @constructor
        */

        example.Person = function(name) {
          this.name = name;
          this.bla = {};
          this.fok = '$' // dollar sucks for some reason
        }

        /**
          @enum {string}
        */


        example.Person.EventType = {
          'FOO': 'foo'
        };

        /**
          @type {string}
        */


        example.Person.prototype.name = '';

        example.Person.prototype.showName = function() {
          return alert(this.name + example.Person.EventType);
        };"""

    coffeeSourceWithExtends = """
      // Generated by CoffeeScript 1.3.3
      var __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

      goog.provide('example.Person');

      example.Person = (function(_super) {

        __extends(Person, _super);

        /**
          @param {string} name
          @constructor
        */


        function Person(name) {
          this.name = name;
          this.bla = {};
        }

        /**
          @enum {string}
        */


        Person.EventType = {
          'FOO': 'foo'
        };

        /**
          @type {string}
        */


        Person.prototype.name = '';

        Person.prototype.showName = function() {
          Person.__super__.showName.call(this, 'fok');
          return alert(this.name + Person.EventType);
        };return Person;

      })(este.Foo);"""

    closureSourceWithExtends = """
      // Fixed coffee code for Closure Compiler by este dev stack
      // Generated by CoffeeScript 1.3.3
      

      goog.provide('example.Person');

      

        

        /**
          @param {string} name
          @constructor
        */


        example.Person = function(name) {
          this.name = name;
          this.bla = {};
        }

        goog.inherits(Person, este.Foo);

        /**
          @enum {string}
        */


        example.Person.EventType = {
          'FOO': 'foo'
        };

        /**
          @type {string}
        */


        example.Person.prototype.name = '';

        example.Person.prototype.showName = function() {
          Person.superClass_.showName.call(this, 'fok');
          return alert(this.name + example.Person.EventType);
        };"""

    coffeeSourceWithExtendsNoNamespace = """
      // Generated by CoffeeScript 1.3.3
      var Person,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

      goog.provide('Person');

      Person = (function(_super) {

        __extends(Person, _super);

        /**
          @param {string} name
          @constructor
        */


        function Person(name) {
          this.name = name;
          Person.__super__.constructor.call(this, this.name);
        }

        /**
          @enum {string}
        */


        Person.EventType = {
          'FOO': 'foo'
        };

        /**
          @type {string}
        */


        Person.prototype.name = '';

        Person.prototype.showName = function() {
          Person.__super__.showName.call(this, 'fok');
          return alert(this.name + Person.EventType);
        };

        return Person;

      })(Foo);"""

    closureSourceWithExtendsNoNamespace = """
      // Fixed coffee code for Closure Compiler by este dev stack
      // Generated by CoffeeScript 1.3.3


      goog.provide('Person');



        

        /**
          @param {string} name
          @constructor
        */


        var Person = function(name) {
          this.name = name;
          Person.superClass_.constructor.call(this, this.name);
        }

        goog.inherits(Person, Foo);

        /**
          @enum {string}
        */


        Person.EventType = {
          'FOO': 'foo'
        };

        /**
          @type {string}
        */


        Person.prototype.name = '';

        Person.prototype.showName = function() {
          Person.superClass_.showName.call(this, 'fok');
          return alert(this.name + Person.EventType);
        };\n\n  """

    # these two files are generated
    coffeeSourceNoNamespace = coffeeSource.replace /example\./g, ''
    # coffee generates var for namespace less constructors
    coffeeSourceNoNamespace = 'var Person;' + coffeeSourceNoNamespace
    closureSourceNoNamespace = closureSource.
      replace(/example\./g, '').
      replace(/Person = function\(/g, 'var Person = function(')
  
    coffeeForClosure = new este.dev.CoffeeForClosure coffeeSource
    coffeeForClosureNoNamespace =
      new este.dev.CoffeeForClosure coffeeSourceNoNamespace
    coffeeForClosureWithExtends =
      new este.dev.CoffeeForClosure coffeeSourceWithExtends
    coffeeForClosureWithExtendsNoNamespace =
      new este.dev.CoffeeForClosure coffeeSourceWithExtendsNoNamespace

  suite 'constructor', ->
    test 'should work', ->
      assert.instanceOf coffeeForClosure, este.dev.CoffeeForClosure
      assert.instanceOf coffeeForClosureNoNamespace, este.dev.CoffeeForClosure
      assert.instanceOf coffeeForClosureWithExtends, este.dev.CoffeeForClosure

  suite 'getClassName', ->
    test 'should found constructor and parse its name', ->
      className = coffeeForClosure.getClassName()
      assert.equal className, 'Person'

      className = coffeeForClosureNoNamespace.getClassName()
      assert.equal className, 'Person'

      className = coffeeForClosureWithExtends.getClassName()
      assert.equal className, 'Person'

  suite 'getSuperClass', ->
    test 'should found super class if defined', ->
      className = coffeeForClosure.getSuperClass 'Person'
      assert.equal className, ''

      className = coffeeForClosureNoNamespace.getSuperClass 'Person'
      assert.equal className, ''

      className = coffeeForClosureWithExtends.getSuperClass 'Person'
      assert.equal className, 'este.Foo'

  suite 'getNamespaceFromWrapper', ->
    test 'should found wrapper and parse namespace', ->
      namespace = coffeeForClosure.getNamespaceFromWrapper 'Person'
      assert.equal namespace, 'example.'

      namespace = coffeeForClosureNoNamespace.getNamespaceFromWrapper 'Person'
      assert.equal namespace, ''

      namespace = coffeeForClosureWithExtends.getNamespaceFromWrapper 'Person'
      assert.equal namespace, 'example.'

  suite 'fix', ->
    test 'should work', ->
      fixed = coffeeForClosure.fix()
      assert.equal fixed, closureSource

      fixed = coffeeForClosureNoNamespace.fix()
      assert.equal fixed, closureSourceNoNamespace

      fixed = coffeeForClosureWithExtends.fix()
      assert.equal fixed, closureSourceWithExtends

      fixed = coffeeForClosureWithExtendsNoNamespace.fix()
      assert.equal fixed, closureSourceWithExtendsNoNamespace

    # todo: fix this test, it works, but data are not ok
    # test 'should work for more classes', ->
    #   a = coffeeSource + '\n' + coffeeSource.replace /Person/g, 'FooBla'
    #   b = closureSource + '\n' + closureSource.replace /Person/g, 'FooBla'

    #   coffeeForClosure = new este.dev.CoffeeForClosure a
    #   fixed = coffeeForClosure.fix()
    #   assert.equal fixed, b



  












